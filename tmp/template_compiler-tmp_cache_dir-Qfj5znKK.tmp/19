import Ember from 'ember';
export default Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data
/**/) {
this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};
  var buffer = '', stack1, helper, options, self=this, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;

function program1(depth0,data) {
  
  
  data.buffer.push("Browse Refsets");
  }

function program3(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push(" \n        <li> ");
  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0],types:["STRING"],data:data},helper ? helper.call(depth0, "refsets.new", options) : helperMissing.call(depth0, "link-to", "refsets.new", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</li>\n        ");
  return buffer;
  }
function program4(depth0,data) {
  
  
  data.buffer.push("  New Refset");
  }

function program6(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\n					<li><a href=\"#\" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "logout", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push(">Logout</a></li>\n				");
  return buffer;
  }

function program8(depth0,data) {
  
  var buffer = '';
  data.buffer.push("\n					<li><a href=\"#\" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "showRegistrationForm", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push(">Register</a></li>\n					<li><a href=\"#\" ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "showLoginForm", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["STRING"],data:data})));
  data.buffer.push(">Login</a></li>\n				");
  return buffer;
  }

function program10(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\n			<div class=\"meta-wrap\">\n				<span class=\"effective-time items pointer\" rel=\"tooltip\" title=\"Latest member effective time\"><a ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setSortCriteria", "latestEffectiveTime", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","STRING"],data:data})));
  data.buffer.push(" class=\"pointer\">Latest Effective Time</a> ");
  data.buffer.push(escapeExpression((helper = helpers['sort-icon'] || (depth0 && depth0['sort-icon']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:["ID","ID","STRING"],data:data},helper ? helper.call(depth0, "sortBy", "sortOrder", "latestEffectiveTime", options) : helperMissing.call(depth0, "sort-icon", "sortBy", "sortOrder", "latestEffectiveTime", options))));
  data.buffer.push("</span>\n				<span class=\"last-modified items pointer\" rel=\"tooltip\" title=\"Last date refset header or any member was modified\"><a ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setSortCriteria", "modifiedDate", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","STRING"],data:data})));
  data.buffer.push(" class=\"pointer\">Last update date</a> ");
  data.buffer.push(escapeExpression((helper = helpers['sort-icon'] || (depth0 && depth0['sort-icon']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:["ID","ID","STRING"],data:data},helper ? helper.call(depth0, "sortBy", "sortOrder", "modifiedDate", options) : helperMissing.call(depth0, "sort-icon", "sortBy", "sortOrder", "modifiedDate", options))));
  data.buffer.push("</span>\n				<span class=\"last-modified-by pointer items\" rel=\"tooltip\" title=\"User that last modified this refset\"><a ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setSortCriteria", "modifiedBy", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","STRING"],data:data})));
  data.buffer.push(" class=\"pointer\">Last updated by</a> ");
  data.buffer.push(escapeExpression((helper = helpers['sort-icon'] || (depth0 && depth0['sort-icon']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:["ID","ID","STRING"],data:data},helper ? helper.call(depth0, "sortBy", "sortOrder", "modifiedBy", options) : helperMissing.call(depth0, "sort-icon", "sortBy", "sortOrder", "modifiedBy", options))));
  data.buffer.push("</span>\n	</div>\n		\n				");
  stack1 = helpers['if'].call(depth0, "refsets", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(20, program20, data),fn:self.program(11, program11, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n			\n			");
  return buffer;
  }
function program11(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\n        \n					");
  stack1 = helpers['if'].call(depth0, "filteredRefsets", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(18, program18, data),fn:self.program(12, program12, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n				");
  return buffer;
  }
function program12(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\n   \n						 ");
  stack1 = (helper = helpers.collection || (depth0 && depth0.collection),options={hash:{
    'contentBinding': ("filteredRefsets"),
    'height': (400),
    'rowHeight': (70),
    'width': ("100%")
  },hashTypes:{'contentBinding': "STRING",'height': "INTEGER",'rowHeight': "INTEGER",'width': "STRING"},hashContexts:{'contentBinding': depth0,'height': depth0,'rowHeight': depth0,'width': depth0},inverse:self.noop,fn:self.program(13, program13, data),contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "Ember.ListView", options) : helperMissing.call(depth0, "collection", "Ember.ListView", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n					  ");
  return buffer;
  }
function program13(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\n					\n       <div ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":list-group-item :member-list-item meta.disabled:inactiveConcept")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">   \n								");
  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(14, program14, data),contexts:[depth0,depth0],types:["STRING","ID"],data:data},helper ? helper.call(depth0, "refsets.refset", "uuid", options) : helperMissing.call(depth0, "link-to", "refsets.refset", "uuid", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n								<span class=\"refset-id items\">");
  stack1 = helpers._triageMustache.call(depth0, "sctId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>");
  stack1 = helpers['if'].call(depth0, "sctId", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(16, program16, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push(" <span class=\"description pointer desc-id items\" rel=\"tooltip\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("description")
  },hashTypes:{'title': "STRING"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">");
  stack1 = helpers._triageMustache.call(depth0, "description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n				\n							\n									<span class=\"lang-id items pointer\" rel=\"tooltip\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("meta.language")
  },hashTypes:{'title': "STRING"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">");
  stack1 = helpers._triageMustache.call(depth0, "languageCode", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n									<span class=\"refset-id items pointer\" rel=\"tooltip\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("meta.type")
  },hashTypes:{'title': "STRING"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">");
  stack1 = helpers._triageMustache.call(depth0, "typeId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n									<span class=\"module-id items pointer\" rel=\"tooltip\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("meta.moduleType")
  },hashTypes:{'title': "STRING"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">");
  stack1 = helpers._triageMustache.call(depth0, "moduleId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n									<span class=\"comp-id items pointer\" rel=\"tooltip\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("meta.componentType")
  },hashTypes:{'title': "STRING"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">");
  stack1 = helpers._triageMustache.call(depth0, "componentTypeId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n									<span class=\"status-id items\">");
  stack1 = helpers._triageMustache.call(depth0, "meta.status", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n									<span class=\"num-members items\">");
  stack1 = helpers._triageMustache.call(depth0, "totalNoOfMembers", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n							\n									<div class=\"meta-wrap\">\n							\n									<span class=\"effective-time items\">");
  data.buffer.push(escapeExpression((helper = helpers['effective-time-format'] || (depth0 && depth0['effective-time-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "latestEffectiveTime", options) : helperMissing.call(depth0, "effective-time-format", "latestEffectiveTime", options))));
  data.buffer.push("</span>\n									<span class=\"last-modified items\">");
  data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "modifiedDate", options) : helperMissing.call(depth0, "date-format", "modifiedDate", options))));
  data.buffer.push("</span>\n									<span class=\"last-modified-by items\">");
  stack1 = helpers._triageMustache.call(depth0, "modifiedBy", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n                                        </div>\n								</div>\n								\n						  ");
  return buffer;
  }
function program14(depth0,data) {
  
  
  data.buffer.push("<button class=\"btn btn-primary right view-btn\">View Refset</button>");
  }

function program16(depth0,data) {
  
  var buffer = '';
  return buffer;
  }

function program18(depth0,data) {
  
  
  data.buffer.push("\n					  		No Refset match your search filters\n					  ");
  }

function program20(depth0,data) {
  
  
  data.buffer.push("\n					<p>There are currently no matching refsets available.</p>\n				");
  }

function program22(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\n				");
  stack1 = helpers['if'].call(depth0, "refsets", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(20, program20, data),fn:self.program(23, program23, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("			\n			");
  return buffer;
  }
function program23(depth0,data) {
  
  var buffer = '', stack1;
  data.buffer.push("\n					");
  stack1 = helpers['if'].call(depth0, "filteredRefsets", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(18, program18, data),fn:self.program(24, program24, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n				");
  return buffer;
  }
function program24(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\n						 ");
  stack1 = (helper = helpers.collection || (depth0 && depth0.collection),options={hash:{
    'contentBinding': ("filteredRefsets"),
    'height': (400),
    'rowHeight': (45),
    'width': ("100%")
  },hashTypes:{'contentBinding': "STRING",'height': "INTEGER",'rowHeight': "INTEGER",'width': "STRING"},hashContexts:{'contentBinding': depth0,'height': depth0,'rowHeight': depth0,'width': depth0},inverse:self.noop,fn:self.program(25, program25, data),contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "Ember.ListView", options) : helperMissing.call(depth0, "collection", "Ember.ListView", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n					  ");
  return buffer;
  }
function program25(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\n							<div ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'class': (":list-group-item :member-list-item meta.disabled:inactiveConcept")
  },hashTypes:{'class': "STRING"},hashContexts:{'class': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">\n								");
  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(26, program26, data),contexts:[depth0,depth0],types:["STRING","ID"],data:data},helper ? helper.call(depth0, "refsets.refset", "uuid", options) : helperMissing.call(depth0, "link-to", "refsets.refset", "uuid", options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n								<div class=\"\"><span class=\"refset-id items\">");
  stack1 = helpers._triageMustache.call(depth0, "sctId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>");
  stack1 = helpers['if'].call(depth0, "sctId", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(16, program16, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push(" <span class=\"description pointer desc-id items\" rel=\"tooltip\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("description")
  },hashTypes:{'title': "STRING"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">");
  stack1 = helpers._triageMustache.call(depth0, "description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n				\n							\n									<span class=\"pointer lang-id items\" rel=\"tooltip\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("meta.language")
  },hashTypes:{'title': "STRING"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">");
  stack1 = helpers._triageMustache.call(depth0, "languageCode", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n									<span class=\"refset-id items pointer\" rel=\"tooltip\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("meta.type")
  },hashTypes:{'title': "STRING"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">");
  stack1 = helpers._triageMustache.call(depth0, "typeId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n									<span class=\"module-id items pointer\" rel=\"tooltip\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("meta.moduleType")
  },hashTypes:{'title': "STRING"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">");
  stack1 = helpers._triageMustache.call(depth0, "moduleId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n									<span class=\"comp-id items pointer\" rel=\"tooltip\" ");
  data.buffer.push(escapeExpression(helpers['bind-attr'].call(depth0, {hash:{
    'title': ("meta.componentType")
  },hashTypes:{'title': "STRING"},hashContexts:{'title': depth0},contexts:[],types:[],data:data})));
  data.buffer.push(">");
  stack1 = helpers._triageMustache.call(depth0, "componentTypeId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n									<span class=\"status-id items\">");
  stack1 = helpers._triageMustache.call(depth0, "meta.status", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n									<span class=\"num-members items\">");
  stack1 = helpers._triageMustache.call(depth0, "totalNoOfMembers", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</span>\n								</div>\n							</div>\n						  ");
  return buffer;
  }
function program26(depth0,data) {
  
  
  data.buffer.push("<button class=\"btn btn-primary right right view-btn\">View Refset</button>");
  }

function program28(depth0,data) {
  
  var buffer = '', stack1, helper, options;
  data.buffer.push("\n		<li>\n			<span class=\"right\">");
  data.buffer.push(escapeExpression((helper = helpers['date-format'] || (depth0 && depth0['date-format']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data},helper ? helper.call(depth0, "published", options) : helperMissing.call(depth0, "date-format", "published", options))));
  data.buffer.push("</span>\n			<h4>");
  stack1 = helpers._triageMustache.call(depth0, "title", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</h4>\n			<p>");
  data.buffer.push(escapeExpression(helpers._triageMustache.call(depth0, "description", {hash:{
    'unescaped': ("true")
  },hashTypes:{'unescaped': "STRING"},hashContexts:{'unescaped': depth0},contexts:[depth0],types:["ID"],data:data})));
  data.buffer.push("</p>\n		</li>\n	");
  return buffer;
  }

  data.buffer.push("<div class=\"dashboard\">\n<div class=\"col-md-3 dashboard-sidebar\">\n     <h2>Useful Tools</h2>\n    <ul>\n    <li>");
  stack1 = (helper = helpers['query-params'] || (depth0 && depth0['query-params']),options={hash:{
    'showUnpublished': ("0"),
    'showInactive': ("0")
  },hashTypes:{'showUnpublished': "STRING",'showInactive': "STRING"},hashContexts:{'showUnpublished': depth0,'showInactive': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, "query-params", options));
  stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0],types:["STRING","sexpr"],data:data},helper ? helper.call(depth0, "refsets", stack1, options) : helperMissing.call(depth0, "link-to", "refsets", stack1, options));
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("</li>\n						");
  stack1 = helpers['if'].call(depth0, "user.token", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n        </ul>\n 	");
  stack1 = helpers['if'].call(depth0, "user.token", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n</div>\n<div class=\"col-md-6 \">\n<h1> Most Popular Refsets</h1>\n    \n	<span class=\"right subtext\">(hover over anything in <span class=\"lightblue\">blue</span> for more info)</span>\n		<h1>Browse Reference Sets</h1>\n\n\n				\n                <span class=\"pointer refset-id items first\"><a ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setSortCriteria", "sctId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","STRING"],data:data})));
  data.buffer.push(" class=\"pointer\">Refset Id</a> ");
  data.buffer.push(escapeExpression((helper = helpers['sort-icon'] || (depth0 && depth0['sort-icon']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:["ID","ID","STRING"],data:data},helper ? helper.call(depth0, "sortBy", "sortOrder", "sctId", options) : helperMissing.call(depth0, "sort-icon", "sortBy", "sortOrder", "sctId", options))));
  data.buffer.push("</span> \n                                                                                                      \n				<span class=\"pointer desc-id items\"><a ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setSortCriteria", "description", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","STRING"],data:data})));
  data.buffer.push(" class=\"pointer  \">Description</a> ");
  data.buffer.push(escapeExpression((helper = helpers['sort-icon'] || (depth0 && depth0['sort-icon']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:["ID","ID","STRING"],data:data},helper ? helper.call(depth0, "sortBy", "sortOrder", "description", options) : helperMissing.call(depth0, "sort-icon", "sortBy", "sortOrder", "description", options))));
  data.buffer.push("</span>\n				\n\n				<span class=\"pointer lang-id items\"><a ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setSortCriteria", "languageCode", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","STRING"],data:data})));
  data.buffer.push(" class=\"pointer \">Language</a> ");
  data.buffer.push(escapeExpression((helper = helpers['sort-icon'] || (depth0 && depth0['sort-icon']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:["ID","ID","STRING"],data:data},helper ? helper.call(depth0, "sortBy", "sortOrder", "languageCode", options) : helperMissing.call(depth0, "sort-icon", "sortBy", "sortOrder", "languageCode", options))));
  data.buffer.push("</span>\n				<span class=\"refset-id items pointer\"><a ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setSortCriteria", "typeId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","STRING"],data:data})));
  data.buffer.push(" class=\"pointer\">Refset Type Id</a> ");
  data.buffer.push(escapeExpression((helper = helpers['sort-icon'] || (depth0 && depth0['sort-icon']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:["ID","ID","STRING"],data:data},helper ? helper.call(depth0, "sortBy", "sortOrder", "typeId", options) : helperMissing.call(depth0, "sort-icon", "sortBy", "sortOrder", "typeId", options))));
  data.buffer.push("</span>\n				<span class=\"module-id items pointer\"><a ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setSortCriteria", "moduleId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","STRING"],data:data})));
  data.buffer.push(" class=\"pointer\">Module Id</a> ");
  data.buffer.push(escapeExpression((helper = helpers['sort-icon'] || (depth0 && depth0['sort-icon']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:["ID","ID","STRING"],data:data},helper ? helper.call(depth0, "sortBy", "sortOrder", "moduleId", options) : helperMissing.call(depth0, "sort-icon", "sortBy", "sortOrder", "moduleId", options))));
  data.buffer.push("</span>\n				<span class=\"comp-id items pointer\"><a ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setSortCriteria", "componentTypeId", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","STRING"],data:data})));
  data.buffer.push(" class=\"pointer\">Component Type Id</a> ");
  data.buffer.push(escapeExpression((helper = helpers['sort-icon'] || (depth0 && depth0['sort-icon']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:["ID","ID","STRING"],data:data},helper ? helper.call(depth0, "sortBy", "sortOrder", "componentTypeId", options) : helperMissing.call(depth0, "sort-icon", "sortBy", "sortOrder", "componentTypeId", options))));
  data.buffer.push("</span>\n				<span class=\"status-id items pointer\" rel=\"tooltip\" title=\"A Refset can have status: Published, Unpublished or Inactive\"><a ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setSortCriteria", "meta.status", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","STRING"],data:data})));
  data.buffer.push(" class=\"pointer\">Status</a> ");
  data.buffer.push(escapeExpression((helper = helpers['sort-icon'] || (depth0 && depth0['sort-icon']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:["ID","ID","STRING"],data:data},helper ? helper.call(depth0, "sortBy", "sortOrder", "meta.status", options) : helperMissing.call(depth0, "sort-icon", "sortBy", "sortOrder", "meta.status", options))));
  data.buffer.push("</span>\n				<span class=\"num-members items pointer\"><a ");
  data.buffer.push(escapeExpression(helpers.action.call(depth0, "setSortCriteria", "totalNoOfMembers", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:["STRING","STRING"],data:data})));
  data.buffer.push(" class=\"pointer\">Member Count</a> ");
  data.buffer.push(escapeExpression((helper = helpers['sort-icon'] || (depth0 && depth0['sort-icon']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:["ID","ID","STRING"],data:data},helper ? helper.call(depth0, "sortBy", "sortOrder", "totalNoOfMembers", options) : helperMissing.call(depth0, "sort-icon", "sortBy", "sortOrder", "totalNoOfMembers", options))));
  data.buffer.push("</span>\n			\n			\n			");
  stack1 = helpers['if'].call(depth0, "showMetaData", {hash:{},hashTypes:{},hashContexts:{},inverse:self.program(22, program22, data),fn:self.program(10, program10, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n	\n	\n	</div>\n<div class=\"col-md-3 dashboard-sidebar\">\n    <h2>Latest Refset Tool News</h2>\n<ul class=\"list-group refset-list\">\n	");
  stack1 = helpers.each.call(depth0, "news", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(28, program28, data),contexts:[depth0],types:["ID"],data:data});
  if(stack1 || stack1 === 0) { data.buffer.push(stack1); }
  data.buffer.push("\n</ul>\n    \n</div>\n    </div>");
  return buffer;
  
});
